Martin Escardo, Paulo Oliva, 2024

Non-empty list monad.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan hiding (J)

module Games.NonEmptyList where

open import Games.Monad
open import MLTT.List renaming (map to lmap ; map-‚àò to lmap-‚àò)
open import Notation.CanonicalMap
open import UF.Subsingletons

being-non-empty-is-prop : {X : ùì§ Ãá } (xs : List X) ‚Üí is-prop (is-non-empty xs)
being-non-empty-is-prop []       = ùüò-is-prop
being-non-empty-is-prop (x ‚à∑ xs) = ùüô-is-prop

List‚Å∫ : Type ‚Üí Type
List‚Å∫ X = Œ£ xs Íûâ List X , is-non-empty xs

module _ {X : Type} where

 [_]‚Å∫ : X ‚Üí List‚Å∫ X
 [ x ]‚Å∫ = (x ‚à∑ []) , cons-is-non-empty

 head‚Å∫ : List‚Å∫ X ‚Üí X
 head‚Å∫ ((x ‚à∑ xs) , cons-is-non-empty) = x

 tail‚Å∫ : List‚Å∫ X ‚Üí List X
 tail‚Å∫ ((x ‚à∑ xs) , cons-is-non-empty) = xs

 cons‚Å∫ : X ‚Üí List X ‚Üí List‚Å∫ X
 cons‚Å∫ x xs = (x ‚à∑ xs) , cons-is-non-empty

 underlying-list‚Å∫ : List‚Å∫ X ‚Üí List X
 underlying-list‚Å∫ = pr‚ÇÅ

 underlying-list‚Å∫-is-non-empty : (xs : List‚Å∫ X)
                               ‚Üí is-non-empty (underlying-list‚Å∫ xs)
 underlying-list‚Å∫-is-non-empty = pr‚ÇÇ

 instance
  canonical-map-List‚Å∫-to-List : Canonical-Map (List‚Å∫ X) (List X)
  Œπ {{canonical-map-List‚Å∫-to-List}} = underlying-list‚Å∫

 to-List‚Å∫-Ôºù : {xs ys : List‚Å∫ X} ‚Üí Œπ xs Ôºù Œπ ys ‚Üí xs Ôºù ys
 to-List‚Å∫-Ôºù = to-subtype-Ôºù being-non-empty-is-prop

List-ext-lemma‚Åª : {X Y : Type} (f : X ‚Üí List‚Å∫ Y) (xs : List X)
                ‚Üí is-non-empty xs
                ‚Üí is-non-empty (List-ext (Œπ ‚àò f) xs)
List-ext-lemma‚Åª f (x ‚à∑ xs) cons-is-non-empty =
 is-non-empty-++ (Œπ (f x)) _ (underlying-list‚Å∫-is-non-empty (f x))

ùïÉ‚Å∫ : Monad
ùïÉ‚Å∫ = record {
 functor = List‚Å∫ ;
 Œ∑       = Œª x ‚Üí (x ‚à∑ []) , cons-is-non-empty ;
 ext     = Œª {X} {Y} (f : X ‚Üí List‚Å∫ Y) (xs : List‚Å∫ X)
            ‚Üí List-ext (Œπ ‚àò f) (Œπ xs) ,
              List-ext-lemma‚Åª f (Œπ xs) (underlying-list‚Å∫-is-non-empty xs) ;
 ext-Œ∑   = Œª {X} (xs : List‚Å∫ X)
            ‚Üí to-List‚Å∫-Ôºù (concat-singletons (Œπ xs)) ;
 unit    = Œª {X} {Y} (f : X ‚Üí List‚Å∫ Y) (x : X)
            ‚Üí to-List‚Å∫-Ôºù (List-ext-unit (Œπ ‚àò f) x) ;
 assoc   = Œª {X} {Y} {Z} (g : Y ‚Üí List‚Å∫ Z) (f : X ‚Üí List‚Å∫ Y) (xs : List‚Å∫ X)
            ‚Üí to-List‚Å∫-Ôºù (List-ext-assoc (Œπ ‚àò g) (Œπ ‚àò f) (Œπ xs))
 }

module List‚Å∫-definitions where

 _‚äó·¥∏‚Å∫_ : {X : Type} {Y : X ‚Üí Type}
      ‚Üí List‚Å∫ X
      ‚Üí ((x : X) ‚Üí List‚Å∫ (Y x))
      ‚Üí List‚Å∫ (Œ£ x Íûâ X , Y x)
 _‚äó·¥∏‚Å∫_ = _‚äó_ ùïÉ‚Å∫

 Œ∑·¥∏‚Å∫ : {X : Type} ‚Üí X ‚Üí List‚Å∫ X
 Œ∑·¥∏‚Å∫ = Œ∑ ùïÉ‚Å∫

 ext·¥∏‚Å∫ : {X Y : Type} ‚Üí (X ‚Üí List‚Å∫ Y) ‚Üí List‚Å∫ X ‚Üí List‚Å∫ Y
 ext·¥∏‚Å∫ = ext ùïÉ‚Å∫

 map·¥∏‚Å∫ : {X Y : Type} ‚Üí (X ‚Üí Y) ‚Üí List‚Å∫ X ‚Üí List‚Å∫ Y
 map·¥∏‚Å∫ = map ùïÉ‚Å∫

 lmap‚Å∫ : {X Y : Type} (f : X ‚Üí Y) (xs : List‚Å∫ X) ‚Üí List‚Å∫ Y
 lmap‚Å∫ f xs = lmap f (Œπ xs) ,
              map-is-non-empty f (Œπ xs) (underlying-list‚Å∫-is-non-empty xs)

 concat‚Å∫-non-empty : {X : Type} (xss : List‚Å∫ (List‚Å∫ X))
                   ‚Üí is-non-empty (concat (lmap Œπ (Œπ xss)))
 concat‚Å∫-non-empty (((xs , xs-ne) ‚à∑ xss) , xss-ne) =
  is-non-empty-++ xs (concat (lmap Œπ xss)) xs-ne

 concat‚Å∫ : {X : Type} ‚Üí List‚Å∫ (List‚Å∫ X) ‚Üí List‚Å∫ X
 concat‚Å∫ {X} xss = concat (lmap Œπ (Œπ xss)) , concat‚Å∫-non-empty xss

 map·¥∏‚Å∫-lemma : {X Y : Type} (f : X ‚Üí Y) (xs : List‚Å∫ X)
             ‚Üí map·¥∏‚Å∫ f xs Ôºù lmap‚Å∫ f xs
 map·¥∏‚Å∫-lemma f xs = to-List‚Å∫-Ôºù (concat-singletons' f (Œπ xs))

 ext·¥∏‚Å∫-explicitly : {X Y : Type}
                    (f : X ‚Üí List‚Å∫ Y)
                    (xs : List‚Å∫ X)
                  ‚Üí ext·¥∏‚Å∫ f xs Ôºù concat‚Å∫ (lmap‚Å∫ f xs)
 ext·¥∏‚Å∫-explicitly f xs = to-List‚Å∫-Ôºù I
  where
   I : concat (lmap (Œπ ‚àò f) (Œπ xs)) Ôºù concat (lmap Œπ (lmap f (Œπ xs)))
   I = ap concat (lmap-‚àò f Œπ (Œπ xs))

 open import UF.FunExt

 ‚äó·¥∏‚Å∫-explicitly
  : funext‚ÇÄ
  ‚Üí {X : Type} {Y : X ‚Üí Type}
    (xs : List‚Å∫ X)
    (ys : (x : X) ‚Üí List‚Å∫ (Y x))
  ‚Üí xs ‚äó·¥∏‚Å∫ ys Ôºù concat‚Å∫ (lmap‚Å∫ (Œª x ‚Üí lmap‚Å∫ (Œª y ‚Üí x , y) (ys x)) xs)
 ‚äó·¥∏‚Å∫-explicitly fe xs ys =
  xs ‚äó·¥∏‚Å∫ ys Ôºù‚ü® refl ‚ü©
  ext·¥∏‚Å∫ (Œª x ‚Üí map·¥∏‚Å∫ (Œª y ‚Üí x , y) (ys x)) xs           Ôºù‚ü® I ‚ü©
  ext·¥∏‚Å∫ (Œª x ‚Üí lmap‚Å∫ (Œª y ‚Üí x , y) (ys x)) xs           Ôºù‚ü® II ‚ü©
  concat‚Å∫ (lmap‚Å∫ (Œª x ‚Üí lmap‚Å∫ (Œª y ‚Üí x , y) (ys x)) xs) ‚àé
   where
    I  = ap (Œª - ‚Üí ext·¥∏‚Å∫ - xs)
            (dfunext fe (Œª x ‚Üí map·¥∏‚Å∫-lemma (Œª y ‚Üí x , y) (ys x)))
    II = ext·¥∏‚Å∫-explicitly (Œª x ‚Üí lmap‚Å∫ (Œª y ‚Üí x , y) (ys x)) xs

 _+++_ : {X : Type} ‚Üí List‚Å∫ X ‚Üí List X ‚Üí List‚Å∫ X
 (xs , xs-ne) +++ ys = (xs ++ ys) , is-non-empty-++ xs ys xs-ne

 head‚Å∫-of-+++ : {X : Type} (xs : List‚Å∫ X) (ys : List X)
              ‚Üí head‚Å∫ (xs +++ ys) Ôºù head‚Å∫ xs
 head‚Å∫-of-+++ ((x ‚à∑ xs) , xs-ne) ys = refl

 head‚Å∫-of-concat‚Å∫ : {X : Type} (xss : List‚Å∫ (List‚Å∫ X))
                  ‚Üí head‚Å∫ (concat‚Å∫ xss) Ôºù head‚Å∫ (head‚Å∫ xss)
 head‚Å∫-of-concat‚Å∫ ((xs ‚à∑ xss) , cons-is-non-empty) = head‚Å∫-of-+++ xs (concat (lmap Œπ xss))

 head‚Å∫-of-lmap‚Å∫ :  {X Y : Type} (f : X ‚Üí Y) (xs : List‚Å∫ X)
                ‚Üí head‚Å∫ (lmap‚Å∫ f xs) Ôºù f (head‚Å∫ xs)
 head‚Å∫-of-lmap‚Å∫ f ((x ‚à∑ xs) , _) = refl
